"""
This type stub file was generated by pyright.
"""

BYTES = ...
BYTES_MIN = ...
BYTES_MAX = ...
KEYBYTES = ...
KEYBYTES_MIN = ...
KEYBYTES_MAX = ...
SALTBYTES = ...
PERSONALBYTES = ...
SCRYPT_AVAILABLE = ...
_b2b_init = ...
_b2b_final = ...
_b2b_update = ...

class blake2b(object):
    """
    :py:mod:`hashlib` API compatible blake2b algorithm implementation
    """

    MAX_DIGEST_SIZE = ...
    MAX_KEY_SIZE = ...
    PERSON_SIZE = ...
    SALT_SIZE = ...
    def __init__(self, data=..., digest_size=..., key=..., salt=..., person=...) -> None:
        """
        :py:class:`.blake2b` algorithm initializer

        :param data:
        :type data: bytes
        :param int digest_size: the requested digest size; must be
                                at most :py:attr:`.MAX_DIGEST_SIZE`;
                                the default digest size is :py:data:`.BYTES`
        :param key: the key to be set for keyed MAC/PRF usage; if set,
                    the key must be at most :py:data:`.KEYBYTES_MAX` long
        :type key: bytes
        :param salt: a initialization salt at most
                     :py:attr:`.SALT_SIZE` long; it will be zero-padded
                     if needed
        :type salt: bytes
        :param person: a personalization string at most
                       :py:attr:`.PERSONAL_SIZE` long; it will be zero-padded
                       if needed
        :type person: bytes
        """
        ...
    @property
    def digest_size(self): ...
    @property
    def block_size(self): ...
    @property
    def name(self): ...
    def update(self, data): ...
    def digest(self): ...
    def hexdigest(self): ...
    def copy(self): ...
    def __reduce__(self):
        """
        Raise the same exception as hashlib's blake implementation
        on copy.copy()
        """
        ...

def scrypt(password, salt=..., n=..., r=..., p=..., maxmem=..., dklen=...):
    """
    Derive a cryptographic key using the scrypt KDF.

    :raises nacl.exceptions.UnavailableError: If called when using a
        minimal build of libsodium.

    Implements the same signature as the ``hashlib.scrypt`` implemented
    in cpython version 3.6
    """
    ...
