"""
This type stub file was generated by pyright.
"""

crypto_aead_chacha20poly1305_ietf_KEYBYTES = ...
crypto_aead_chacha20poly1305_ietf_NSECBYTES = ...
crypto_aead_chacha20poly1305_ietf_NPUBBYTES = ...
crypto_aead_chacha20poly1305_ietf_ABYTES = ...
crypto_aead_chacha20poly1305_ietf_MESSAGEBYTES_MAX = ...
_aead_chacha20poly1305_ietf_CRYPTBYTES_MAX = ...
crypto_aead_chacha20poly1305_KEYBYTES = ...
crypto_aead_chacha20poly1305_NSECBYTES = ...
crypto_aead_chacha20poly1305_NPUBBYTES = ...
crypto_aead_chacha20poly1305_ABYTES = ...
crypto_aead_chacha20poly1305_MESSAGEBYTES_MAX = ...
_aead_chacha20poly1305_CRYPTBYTES_MAX = ...
crypto_aead_xchacha20poly1305_ietf_KEYBYTES = ...
crypto_aead_xchacha20poly1305_ietf_NSECBYTES = ...
crypto_aead_xchacha20poly1305_ietf_NPUBBYTES = ...
crypto_aead_xchacha20poly1305_ietf_ABYTES = ...
crypto_aead_xchacha20poly1305_ietf_MESSAGEBYTES_MAX = ...
_aead_xchacha20poly1305_ietf_CRYPTBYTES_MAX = ...

def crypto_aead_chacha20poly1305_ietf_encrypt(message, aad, nonce, key):
    """
    Encrypt the given ``message`` using the IETF ratified chacha20poly1305
    construction described in RFC7539.

    :param message:
    :type message: bytes
    :param aad:
    :type aad: bytes
    :param nonce:
    :type nonce: bytes
    :param key:
    :type key: bytes
    :return: authenticated ciphertext
    :rtype: bytes
    """
    ...

def crypto_aead_chacha20poly1305_ietf_decrypt(ciphertext, aad, nonce, key):
    """
    Decrypt the given ``ciphertext`` using the IETF ratified chacha20poly1305
    construction described in RFC7539.

    :param ciphertext:
    :type ciphertext: bytes
    :param aad:
    :type aad: bytes
    :param nonce:
    :type nonce: bytes
    :param key:
    :type key: bytes
    :return: message
    :rtype: bytes
    """
    ...

def crypto_aead_chacha20poly1305_encrypt(message, aad, nonce, key):
    """
    Encrypt the given ``message`` using the "legacy" construction
    described in draft-agl-tls-chacha20poly1305.

    :param message:
    :type message: bytes
    :param aad:
    :type aad: bytes
    :param nonce:
    :type nonce: bytes
    :param key:
    :type key: bytes
    :return: authenticated ciphertext
    :rtype: bytes
    """
    ...

def crypto_aead_chacha20poly1305_decrypt(ciphertext, aad, nonce, key):
    """
    Decrypt the given ``ciphertext`` using the "legacy" construction
    described in draft-agl-tls-chacha20poly1305.

    :param ciphertext: authenticated ciphertext
    :type ciphertext: bytes
    :param aad:
    :type aad: bytes
    :param nonce:
    :type nonce: bytes
    :param key:
    :type key: bytes
    :return: message
    :rtype: bytes
    """
    ...

def crypto_aead_xchacha20poly1305_ietf_encrypt(message, aad, nonce, key):
    """
    Encrypt the given ``message`` using the long-nonces xchacha20poly1305
    construction.

    :param message:
    :type message: bytes
    :param aad:
    :type aad: bytes
    :param nonce:
    :type nonce: bytes
    :param key:
    :type key: bytes
    :return: authenticated ciphertext
    :rtype: bytes
    """
    ...

def crypto_aead_xchacha20poly1305_ietf_decrypt(ciphertext, aad, nonce, key):
    """
    Decrypt the given ``ciphertext`` using the long-nonces xchacha20poly1305
    construction.

    :param ciphertext: authenticated ciphertext
    :type ciphertext: bytes
    :param aad:
    :type aad: bytes
    :param nonce:
    :type nonce: bytes
    :param key:
    :type key: bytes
    :return: message
    :rtype: bytes
    """
    ...
