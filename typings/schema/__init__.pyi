"""
This type stub file was generated by pyright.
"""

import typing
from typing import Any, Callable, List, Mapping, Union

"""schema is a library for validating Python data structures, such as those
obtained from config-files, forms, external services or command-line
parsing, converted from JSON/YAML (or something else) to Python data-types."""
__version__: str

class SchemaError(Exception):
    """Error during Schema validation."""

    def __init__(self, autos: List[Any], errors: typing.Optional[Union[List[str], str]] = None) -> None: ...
    @property
    def code(self) -> str:
        """
        Removes duplicates values in auto and error list.
        parameters.
        """
        ...

class SchemaWrongKeyError(SchemaError):
    """Error Should be raised when an unexpected key is detected within the
    data set being."""

    ...

class SchemaMissingKeyError(SchemaError):
    """Error should be raised when a mandatory key is not found within the
    data set being validated"""

    ...

class SchemaOnlyOneAllowedError(SchemaError):
    """Error should be raised when an only_one Or key has multiple matching candidates"""

    ...

class SchemaForbiddenKeyError(SchemaError):
    """Error should be raised when a forbidden key is found within the
    data set being validated, and its value matches the value that was specified"""

    ...

class SchemaUnexpectedTypeError(SchemaError):
    """Error should be raised when a type mismatch is detected within the
    data set being validated."""

    ...

class And(object):
    """
    Utility function to combine validation directives in AND Boolean fashion.
    """

    def __init__(self, *args: Any, **kw: Any) -> None: ...
    def __repr__(self) -> str: ...
    @property
    def args(self) -> List:
        """The provided parameters"""
        ...
    def validate(self, data: Any) -> Any:
        """
        Validate data using defined sub schema/expressions ensuring all
        values are valid.
        :param data: to be validated with sub defined schemas.
        :return: returns validated data
        """
        ...

class Or(And):
    """Utility function to combine validation directives in a OR Boolean
    fashion."""

    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def reset(self) -> None: ...
    def validate(self, data: Any) -> Any:
        """
        Validate data using sub defined schema/expressions ensuring at least
        one value is valid.
        :param data: data to be validated by provided schema.
        :return: return validated data if not validation
        """
        ...

class Regex(object):
    """
    Enables schema.py to validate string using regular expressions.
    """

    NAMES = List[str]
    def __init__(
        self, pattern_str: str, flags: typing.Optional[int] = 0, error: typing.Optional[str] = None
    ) -> None: ...
    def __repr__(self) -> str: ...
    @property
    def pattern_str(self) -> str:
        """The pattern for the represented regular expression"""
        ...
    def validate(self, data: Any) -> Any:
        """
        Validated data using defined regex.
        :param data: data to be validated
        :return: return validated data.
        """
        ...

class Use(object):
    """
    For more general use cases, you can use the Use class to transform
    the data while it is being validate.
    """

    def __init__(self, callable_: Callable, error: typing.Optional[str] = None) -> None: ...
    def __repr__(self) -> str: ...
    def validate(self, data: Any) -> Any: ...

class Schema(object):
    """
    Entry point of the library, use this class to instantiate validation
    schema for the data that will be validated.
    """

    def __init__(
        self,
        schema: Mapping[Any, Any],
        error: typing.Optional[str] = None,
        ignore_extra_keys: bool = False,
        name: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        as_reference: bool = False,
    ) -> None: ...
    def __repr__(self) -> str: ...
    @property
    def schema(self) -> Mapping[Any, Any]: ...
    @property
    def description(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def ignore_extra_keys(self) -> bool: ...
    def is_valid(self, data: Any) -> bool:
        """Return whether the given data has passed all the validations
        that were specified in the given schema.
        """
        ...
    def validate(self, data: Any) -> Any: ...
    def json_schema(self, schema_id: str, use_refs: bool = False) -> Mapping[str, Any]:
        """Generate a draft-07 JSON schema dict representing the Schema.
        This method must be called with a schema_id.

        :param schema_id: The value of the $id on the main schema
        :param use_refs: Enable reusing object references in the resulting JSON schema.
                         Schemas with references are harder to read by humans, but are a lot smaller when there
                         is a lot of reuse
        """
        ...

class Optional(Schema):
    """Marker for an optional part of the validation Schema."""

    _MARKER: object
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other) -> bool: ...
    def reset(self) -> None: ...

class Hook(Schema):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class Forbidden(Hook):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class Literal(object):
    def __init__(self, value: Any, description: typing.Optional[str] = None) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    @property
    def description(self) -> str: ...
    @property
    def schema(self) -> Any: ...

class Const(Schema):
    def validate(self, data: Any) -> Any: ...
